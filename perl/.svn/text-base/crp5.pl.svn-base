#!/usr/bin/perl -w
use strict; use Init; use Common; use Run; use Localdb; use Readfile; use Path::Class;
use Parser; use Gff; use Crp; use Mapping; use GeneModel; use Hmm; use Writefile;
use List::Util qw/min max sum/; use POSIX qw/ceil floor/;
use List::MoreUtils qw/first_index last_index insert_after apply indexes pairwise zip uniq/;
my ($feDb, $refDb) = ("mt_35", "mt_35");
my $f00 = file($DIR_Misc2, "crp", "21_groups.txt");
my $DIR_Work = dir($DIR_Misc2, "crp_plot");
my $f01 = file($DIR_Work, "01_groups.txt");
#getFinalCrps($f00, $f01);
#groupSum($f01);
my $ps = {
  1 => {pre=>21, tag=>'nodule_up_regulated'},
  2 => {pre=>22, tag=>'legume_specific'},
  3 => {pre=>23, tag=>'legume_specific_illumina_excluded'},
  4 => {pre=>24, tag=>'medicago_specific'},
  5 => {pre=>25, tag=>'medicago_specific_illumina_excluded'},
  6 => {pre=>26, tag=>'local_duplications'},
};
my $p = $ps->{6};
$p = { %$p, refdb=>$refDb, fedb=>$feDb};
#getLocById($p);
#getOverlapGenes(-in=>$f01, -p=>$p);
#overlapSum($p);
my $f41 = file($DIR_Work, "41_cluster.txt");
my $f41x = file($DIR_Work, "41x_cluster.txt");
#convLoc(-in=>$f41, -out=>$f41x, -refdb=>$refDb);
sub getFinalCrps {
  my ($fi, $fo) = @_;
  my $t = readTable(-in=>$fi, -header=>1);
  my $idx1 = first_index {$_ eq "id"} $t->header;
  my $idx2 = first_index {$_ eq "chr"} $t->header;
  my $idx3 = first_index {$_ eq "e_value"} $t->header;
  my $idx4 = first_index {$_ eq "status"} $t->header;
  my $t2 = $t->match_pattern("\$_->[$idx1] !~ /\\*\$/ && \$_->[$idx3] <= 1 && \$_->[$idx4] !~ /false.*positive/i");
  my $t3 = $t2->match_pattern("\$_->[0] lt 'CRP1600'");
  my $t4 = $t3->subTable([0..$t3->nofRow-1], ['group', 'id', 'chr', 'location']);
  my $fh = new IO::File $fo, "w";
  print $fh $t4->tsv(1);
}
sub getLocById {
  my ($p) = @_;
  my ($pre, $tag, $refDb) = map {$p->{$_}} qw/pre tag refdb/;
  my $ld = Localdb->new(-db=>$refDb);
  my $fi = file($DIR_Work, "$pre.txt");
  my $fo = file($DIR_Work, "$pre\_loc.txt");
  my $t = readTable(-in=>$fi, -header=>0);
  $t->header(['id']);
  my $header = [qw/id chr strand start end/];
  my $tr = Data::Table->new([], $header, 0);
  my $ids = $t->delCol("id");
  my $cntIg = 0;
  for my $id (@$ids) {
    $id =~ s/^contig\_([\w\d\_]+)$/ctg$1\.1/;
    my $fe = $ld->getFeatureByName($id);
#    print "  unknown ID: $id\n" unless $fe;
    $cntIg ++, next unless $fe;
    $tr->addRow([$id, $fe->seq_id, $fe->strand, $fe->start, $fe->end]);
  }
  print "  $cntIg ignored\n";
  my $fh = new IO::File $fo, "w";
  print $fh $tr->tsv(1);
}
sub getOverlapGenes {
  my ($fi1, $p) = rearrange(['in', 'p'], @_);
  my $t1 = readTable(-in=>$fi1, -header=>1);
  my ($pre, $tag) = map {$p->{$_}} qw/pre tag/;
  my $fi2 = file($DIR_Work, "$pre\_loc.txt");
  my $fo = file($DIR_Work, "$pre\_overlap.txt");
  my $t2 = readTable(-in=>$fi2, -header=>1);
  my $header = [qw/group id chr location id2 loc2/];
  my $tr = Data::Table->new([], $header, 0); 
  for my $i (0..$t1->nofRow-1) {
    my ($group, $hit, $chr1, $locStr1) = $t1->row($i);
    my $loc1 = locStr2Obj($locStr1);
    my ($s1, $e1) = map {$loc1->$_} qw/start end/;
    my $t3 = $t2->match_pattern("\$_->[1] eq '$chr1' && ((\$_->[3]<=$s1 && \$_->[4]>=$s1) || (\$_->[3]<=$e1 && \$_->[4]>=$e1))");
    if($t3->nofRow > 1) {
      my @ids = $t3->col("id");
      my @geneIds = map {[split(/\./, $_)]->[0]} @ids;
      if(uniq(@geneIds) > 1) {
        die ">2 genes overlap with $group.$hit:\n".join(" ", @ids)."\n";
      } else {
        my $id = [sort {$a cmp $b} @ids]->[0];
        $t3 = $t3->match_pattern("\$_->[0] eq '$id'");
      }
    }
    if($t3->nofRow == 0) {
    } elsif($t3->nofRow == 1) {
      my ($c2, $s2, $e2, $str2) = map {$t3->elm(0, $_)} qw/chr start end strand/;
      my $loc = Bio::Location::Simple->new(-seq_id=>$c2, -start=>$s2, -end=>$e2, -strand=>$str2);
      my ($locStr) = locObj2Str($loc);
      $tr->addRow([$t1->row($i), $t3->elm(0, "id"), $locStr]);
    }
  }
  my $fh = new IO::File $fo, "w";
  print $fh $tr->tsv(1);
}
sub overlapSum {
  my ($p) = @_;
  my ($pre, $tag) = map {$p->{$_}} qw/pre tag/;
  my ($f1, $f2) = map {file($DIR_Work, "$pre\_$_.txt")} ("loc", "overlap");
  my $t1 = readTable(-in=>$f1, -header=>1);
  my $t2 = readTable(-in=>$f2, -header=>1);
  printf " Set A (DEFLs): %d\n", 0;
  printf " Set B ($tag): %d\n", $t1->nofRow;
  printf " Overlap: %d\n", $t2->nofRow;
  groupSum($f2);
}
