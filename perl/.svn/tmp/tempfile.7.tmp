#!/usr/bin/perl -w
use strict; use Init; use Common; use Localdb; use Run; 
use Bio::Seq; use Bio::SeqIO; use Graph; use Bio::SeqFeature::Generic;
use Readfile; use Writefile; use Annotate; use Align;
use Vnt; use VntWrite; use SeqRecover; use VntEffect; use Qry; 
use Gff; use CircosConf; use Draw; use Parser; use Seq; use Convert; use GeneModel;
use Time::HiRes qw/gettimeofday tv_interval/; use Data::Dumper;use Path::Class; 
use Term::ANSIColor qw/:constants/;
use List::Util qw/min max sum/; use POSIX qw/ceil floor/; use Math::Round qw/round/;
use List::MoreUtils qw/first_index last_index insert_after apply indexes pairwise zip uniq/;
sub hmm2Fasta {
  my $dirW = dir($DIR_Misc2, "crp", "01_in");
  my $f01 = file($dirW, "01.hmm");
  my $f02 = file($dirW, "02_stat.tbl");
  my $f03 = file($dirW, "03_con.fa");
#  my $fo = file($DIR_Misc2, "blast", "02_CRP_blastP", "01_seq.fa");
  system("mkdir -p `dirname $f03`");
  system("touch $f03");
  my $t = readTable(-in=>$f02, -header=>1);
  for my $i (0..$t->nofRow-1) {
    my ($idx, $hmm) = $t->row($i);
    my $ft1 = "/tmp/tmp.hmm";
    my $cmd1 = "hmmfetch $f01 $hmm > $ft1";
    system($cmd1);
    my $ft2 = "/tmp/tmp.fa";
    my $cmd2 = "hmmemit -c $ft1 > $ft2";
    system($cmd2);
    system("cat $ft2 >> $f03");
    system("rm $ft1 $ft2");
  }
  $t->addCol([('')x$t->nofRow], "seq");
  my $seqH = Bio::SeqIO->new(-file=>"<$f03", -format=>'fasta');
  my $i = 0;
  while(my $seq = $seqH->next_seq()) {
    my $id = $seq->id;
    my $name = $t->elm($i, "name");
    die "$name ne $id" unless $id =~ /^\Q$name\E/;
    $t->setElm($i++, "seq", $seq->seq);
  }
  my $f04 = file($dirW, "04_stat.tbl");
  my $fh = new IO::File $f04, "w";
  print $fh $t->tsv(1);
  close($fh);
}
sub splitNcgrRefseq {
  my $dirW = file($DIR_Genome, "mt_35/00_seq/00_ncgr");
  my $fi1 = file($dirW, "Mt3.5.1.combined.fa");
  my $fi2 = file($dirW, "../09_bac_info.txt");

  my $t = readTable(-in=>$fi2, -header=>1);
  my $bH = { map {$_ => 1} $t->col("id") };
  my $seqhi = Bio::SeqIO->new(-file=>"<$fi1", -format=>"fasta");

  my $fo1 = file($dirW, "mt_35_ncgr.fa");
  my $fo2 = file($dirW, "11_chrT.fa");
  my $seqho1 = Bio::SeqIO->new(-file=>">$fo1", -format=>"fasta");
  my $seqho2 = Bio::SeqIO->new(-file=>">$fo2", -format=>"fasta");

  my ($cnt_ctg, $cnt_tc, $cnt_bac) = (0, 0, 0);
  local $Term::ANSIColor::AUTORESET = 1;
  while( my $seq = $seqhi->next_seq ) {
    $seqho1->write_seq($seq);
    my $id = $seq->id;
    if($id =~ /chr\d/i) {
      print "\t$id\n";
    } elsif($id =~ /contig/i) {
      $cnt_ctg ++;
    } else {
      $id =~ s/\.\d+$//;
      if(exists $bH->{$id}) {
        $cnt_bac ++;
        $bH->{$id} ++;
      } elsif($id =~ /^[A-Z]{2}\d{5,7}(\.\d+)?$/) {
        $seqho2->write_seq($seq);
        $cnt_tc ++;
      } else {
        print RED "\t$id skipped\n";
      }
    }
  }
  printf "\t%5d contigs\n", $cnt_ctg;
  printf "\t%5d BACs (out of %5d)\n", $cnt_bac, scalar(keys %$bH);
  printf "\t%5d TCs\n", $cnt_tc;
}
sub getRInput {
#getRInput(-outdir=>$d01, -fwin=>$f02, -param=>$p);
  my ($outDir, $f, $param) = rearrange(['outdir', 'fwin', 'param'], @_);
  my $inDir = dir('/export/lab/analysis/antoine/WindowsRhoData/LDHatFiles100kbwin/');
  my $refDb = $param->{refdb};
  my $fh = new IO::File $f, "w";
  print $fh join("\t", qw/round chr wStart wEnd cntSnp sStart sEnd/)."\n";
  for my $i (1..8) {
    my $chr = "chr$i";
    my $wh = getWindows(-chr=>$i, -db=>$refDb, -winsize=>100_000, -winstep=>100_000, -opt=>2);
    my $cnt = 0;
    for my $j (0..@$wh-1) {
      my ($wS, $wE) = @{$wh->[$j]};
      my $round = sprintf("%04d", $j+1);
      my $round2 = sprintf("%01d_%03d", $i, $j+1);
      my $f1 = file($inDir, "$chr\_win_$round.locs");
      my ($cntSnp, $sS, $sE) = (0, "", "");
      if(-s $f1) {
        my $f2 = file($inDir, "$chr\_win_$round.sites");
        die "$f2 is not there\n" unless -s $f2;
        my $fh1 = new IO::File $f1, "r";
        my $line = readline($fh1);
        $line = readline($fh1);
        my @ps = split("\t", $line);
        $cntSnp = @ps;
        $sS = $wS + $ps[0] - 1;
        $sE = $wS + $ps[-1] - 1;
        die "snpEnd[$sE] > winEnd[$wE] at $f1\n" if $sE > $wE;
        my $fo1 = file($outDir, "$round2\_ldhat_loc.txt");
        my $fo2 = file($outDir, "$round2\_ldhat.txt");
        system("cp $f1 $fo1");
        system("cp $f2 $fo2");
      }
      $cnt += $cntSnp;
      print $fh join("\t", $round2, $chr, $wS, $wE, $cntSnp, $sS, $sE)."\n";
    }
    print join("\t", $chr, $cnt)."\n";
  }
}
sub dumpSeq {
#dumpSeq("mt_35_crp_jcvi", "mt_35", dir($DIR_Misc2, "jcvi"));
  my ($feDb, $refDb, $dir) = @_;
  my $ld = Localdb->new(-db=>$feDb);
  my @fes = $ld->getFeatures(-types=>'mRNA');
  my $f11 = file($dir, "51_CDS.fa");
  my $f12 = file($dir, "52_protein.fa");
  my $seqH1 = Bio::SeqIO->new(-file=>">$f11", -format=>"fasta");
  my $seqH2 = Bio::SeqIO->new(-file=>">$f12", -format=>"fasta");
  print @fes." features in $feDb\n";
  my $i = 0;
  for my $fe (@fes) {
    my $id = $fe->id;
    my $seq1 = $ld->seqRetById(-id=>$id, -type=>"CDS", -refdb=>$refDb);
    $seqH1->write_seq($seq1);
    my $seqPro = translate_smart($seq1);
    die "premature stop codon: $id  ".$seq1->length."\n$seqPro\n" if checkProtSeq($seqPro) == 1;
    my $seq2 = Bio::Seq->new(-id=>$id, -seq=>$seqPro);
    $seqH2->write_seq($seq2);
    print "\t$i\n" if ++$i % 1000 == 0;
  }
}
sub ncgrRefMapping {
  my $fi = file($DIR_Genome, "mt_35/00_seq/29.tbl");
  my $fo = file($DIR_Repo, "mt_35/01_reference/11_ref_mapping.tbl");
  my $fhi = new IO::File $fi, "r";
  my $fho = new IO::File $fo, "w";
  while( <$fhi> ) {
    chomp;
    my ($c, $s, $e, $strand, $type, $id, $note) = split "\t";
    if($c =~ /^chr[0UT]$/i && $type =~ /^(BAC)|(tc)|(contig)$/) {
      die "$c:$s-$e [$id] is on - strand\n" if $strand eq "-";
      print $fho join("\t", $id, $c, $s, $e)."\n";
    }
  }
}
sub getNbsLoc {
  my $refDb = "mt_35";
  my $f10 = file($DIR_Misc1, "r/nbs/cl11_cc", "10_sum.txt");
  my $f11 = file($DIR_Misc1, "r/nbs/cl11_cc", "11_loc.txt");
  my $ld = Localdb->new(-db=>$refDb);
  my $t = readTable(-in=>$f10, -header=>1);
  $t->addCol([('') x $t->nofRow], 'chr');
  $t->addCol([('') x $t->nofRow], 'strand');
  $t->addCol([('') x $t->nofRow], 'start');
  $t->addCol([('') x $t->nofRow], 'end');
  for my $i (0..$t->nofRow-1) {
    my $id = $t->elm($i, "id");
    my $fe = $ld->getFeatureByName($id);
    unless($fe) {
      print "cannot find $id\n";
    } else {
      $t->setElm($i, "chr", $fe->seq_id);
      $t->setElm($i, "strand", $fe->strand);
      $t->setElm($i, "start", $fe->start);
      $t->setElm($i, "end", $fe->end);
    }
  }
  my $fh = new IO::File $f11, "w";
  print $fh $t->tsv(1);
  close $fh;
  my $f11x = file($DIR_Misc1, "r/nbs/cl11_cc", "11x_loc.txt");
  convLoc(-in=>$f11, -out=>$f11x, -opti=>1, -opto=>1, -db=>$refDb);
}
sub readHapSample {
  my ($fi) = @_;
  my $fh = new IO::File $fi, "r";
  my $line = readline($fh);
  my @ps = split("\t", $line);
  my $nSample = @ps - 4;
  seek($fh, 0, 0);
  my (@markers, @gts);
  while(<$fh>) {
    chomp;
    next unless $_;
    my @ps = split "\t";
    die "not $nSample samples at:\n$_\n" unless @ps == $nSample + 4;
    push @markers, $ps[1];
    push @gts, [ @ps[4..$#ps] ];
  }
  my $nMarker = @gts;
  return ($nMarker, $nSample, \@gts, \@markers);
}
sub hapsample2Team {
#hapsample2Team();
  my $dirW = dir($DIR_In, "csci8980/01");
  my $fi1 = file($dirW, "case_genotypes_28409.dat");
  my $fi2 = file($dirW, "anticase_genotypes_28409.dat");
  my $fo1 = file($dirW, "team_geno.txt");
  my $fo2 = file($dirW, "team_pheno.txt");
  my ($nMarker1, $nSample1, $gts1, $markers1) = readHapSample($fi1);
  my ($nMarker2, $nSample2, $gts2, $markers2) = readHapSample($fi2);
  die "not equal markers: $nMarker1 != $nMarker2\n" unless $nMarker1 == $nMarker2; 
  printf "%4d markers, %4d samples (%4d cases + %4d controls)\n", $nMarker1, $nSample1+$nSample2, $nSample1, $nSample2;
  my $fho1 = new IO::File $fo1, "w";
  for my $i (0..$nMarker1-1) {
    my $row1 = $gts1->[$i];
    my $row2 = $gts2->[$i];
    print $fho1 join("", @$row1, @$row2)."\n";
  }
  my $fho2 = new IO::File $fo2, "w";
  print $fho2 join("", (1) x $nSample1, (2) x $nSample2)."\n";
}
sub compare2GeneList {
#compare2GeneList();
  my $fi1 = file($DIR_Misc2, "crp_plot/21/01_id.txt");
  my $fi2 = file($DIR_Misc1, "r/nbs/cl11_cc/10_sum.txt");
  my $t1 = readTable(-in=>$fi1, -header=>0);
  my $h;
  for my $id_nsp ($t1->col("col1")) {
    $id_nsp =~ s/\.\d$//;
    $id_nsp =~ s/^ctg/contig\_/;
    $h->{$id_nsp} = 1;
  }
  
  my $t2 = readTable(-in=>$fi2, -header=>1);
  $t2 = $t2->match_pattern("\$_->[3] == 6");
  my @lst_nbs = $t2->col("id");

  my @lst_op;
  for my $id_nbs (@lst_nbs) {
    push @lst_op, $id_nbs if exists $h->{$id_nbs};
  }

  printf "%d in global nod-up list; %d in nbs nod-up list\n", scalar(keys %$h), $#lst_nbs+1;
  printf "\t%d overlap:  %s\n", scalar(@lst_op), join(" ", @lst_op);
}
sub download_mdr_data {
#download_mdr_data();
  my $dirW = dir($DIR_In, "csci8980/03_mdr_data");
  my @mafs = (0.2, 0.4);
  my @sizes = (200, 400, 800, 1600);
  my @hs = (0.01, 0.025, 0.05, 0.1, 0.2, 0.3, 0.4);
  my $url_pre = "http://discovery.dartmouth.edu/epistatic_data/";
  my $fn_format = "epistatic_data_%d_%s_%s.zip";
  for my $maf (@mafs) {
    my $dir = dir($dirW, "maf_$maf");
    for my $size (@sizes) {
      for my $h (@hs) {
        my $fn = sprintf $fn_format, $size, $maf, $h;
        my $url = $url_pre.$fn;
        system("wget -P $dir $url");
        my $f = file($dir, $fn);
        system("unzip $f -d $dir");
        system("rm $f");
      }
    }
  }
}




